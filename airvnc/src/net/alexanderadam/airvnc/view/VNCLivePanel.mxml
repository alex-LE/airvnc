<?xml version="1.0" encoding="utf-8"?>
<comp:VNCPanel 
	xmlns:comp="net.alexanderadam.airvnc.view.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" resize="resizeMe()"
	xmlns:ns1="fvnc.*" backgroundColor="#7C7C7C" rollOver="{actionpanel.visible = true;titlepanel.visible = true}" rollOut="{actionpanel.visible = false;titlepanel.visible = false}"
	creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.containers.errors.ConstraintError;
			import mx.containers.Tile;
			import tw.helpers.flv.SimpleFlvWriter;
			import mx.controls.Alert;
			import mx.core.Window;
			import fvnc.rfb.constants.ProtocolState;
			import fvnc.errors.ConnectionError;
			
			//instantiating our flv writer
			private var myWriter:SimpleFlvWriter = SimpleFlvWriter.getInstance();
			//our interval to record the feed from our webcam
			private var recordInterval:uint;
			//reference to our current video file
			private var curVidFile:File;
			
			private var connected:Boolean;
			private var videoWriter:SimpleFlvWriter = SimpleFlvWriter.getInstance();
			
			public var currentImageHeight:Number;
			public var currentImageWidth:Number;
			
			private var resized:Boolean;
			
			override public function reconnect():void {
				if(this.connected) {
					try {
						vnc.close();
					} catch(e:Error) {
						
					}
					connect();
				}
			}
			
			private function init():void {
				connect();
			}
			
			public function connect():Boolean {
				if(host == '' || password == '') {
					Alert.show('Host or password not set!');
					return false;
				}
				
				resized = false;
				
				vnc.host = this.host;
				vnc.password = this.password;
				titleCaption.text = 'Live Session: ' + this.host;
				
				try {
					vnc.connect();
					vnc.getRFB().addEventListener(IOErrorEvent.IO_ERROR, handleIOError, false, 1);
					vnc.getRFB().addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecError, false, 1);
					
				} catch (e:ConnectionError) {
					Alert.show(e.message);
				} catch (e:SecurityError) {
					Alert.show(e.message);
				}
				
				
				lblVNCStatus.visible = true;
				lblVNCStatus.text = 'connecting ...';
				lblVNCStatus.setStyle('color', 0x01CF00);
				if(vnc.hasEventListener('VNCConnected') == false) {
					vnc.addEventListener('VNCConnected', function():void {
						btnConnect.label = 'Disconnect';
						btnConnect.enabled = true;
						lblVNCStatus.text = 'connected';
						lblVNCStatus.setStyle('color', 0x01CF00);
						connected = true;
						
						currentImageHeight = vnc.getScreenImage().height;
						currentImageWidth = vnc.getScreenImage().width;
						
						resizeMe();
					});
				}
				
				return true;
			}
			
			private function handleIOError(event:IOErrorEvent):void {
				trace(event);
				if ( vnc.getState() == ProtocolState.NOT_CONNECTED )
				{
					lblVNCStatus.text = 'Could not connect';
					lblVNCStatus.setStyle('color', 0xFF0000);
					vnc.close();
				}
				else
				{
					trace( event.text );
					lblVNCStatus.text = 'Could not connect';
					lblVNCStatus.setStyle('color', 0xFF0000);
					vnc.close();
				}
				btnConnect.label = 'Reconnect';
				btnConnect.enabled = true;
				connected = false;
				event.stopImmediatePropagation();
			}
			
			private function handleSecError(event:SecurityErrorEvent):void {
				trace(event);
				if ( vnc.getState() == ProtocolState.NOT_CONNECTED )
				{
					lblVNCStatus.text = 'Could not connect';
					lblVNCStatus.setStyle('color', 0xFF0000);
					vnc.close();
				}
				else
				{
					trace( event.text );
					lblVNCStatus.text = 'Could not connect';
					lblVNCStatus.setStyle('color', 0xFF0000);
					vnc.close();
				}
				btnConnect.label = 'Reconnect';
				btnConnect.enabled = true;
				connected = false;
				event.stopImmediatePropagation();
			}
			
			private function switchVNCStatus():void {
				btnConnect.enabled = false;
				if(connected) {
					btnConnect.label = 'Connect';
					lblVNCStatus.text = 'disconnected';
					vnc.close();
					connected = false;
					btnConnect.enabled = true;
				} else {
					connect();
				}
			}
			
			private function startLiveSession():void {
				// close current session
				if(this.connected) {
					vnc.close();
				}
				
				// create window
				var livesession:Window = new Window();
				livesession.title = 'Live Session';
				livesession.open();
				livesession.maximize();
				livesession.addEventListener(Event.CLOSE, function():void {
					connect();
				});
				
				// add vnc viewer
				var livevnc:FVNC = new FVNC();
				livesession.addChild(livevnc);
				livevnc.host = this.host;
				livevnc.password = this.password;
				livevnc.fitToScreen = true;
				livevnc.percentWidth = 100;
				livevnc.percentHeight = 100;
				livevnc.connect();
			}
			
			private function recordVideo():void {
				if(record_btn.label == "Record"){
					
					curVidFile = File.createTempFile();
					myWriter.createFile(curVidFile,  videoWidth,videoHeight, 2);
					recordInterval = setInterval(recordVid, 100);
					record_btn.label = "Stop";
					
				}else{
					
					clearInterval(recordInterval);
					myWriter.closeFile();
					var pat:RegExp = /\./g;
					var newFileNameStr:String = this.host + '_' + new Date().getTime().toString() + '.flv';//curVidFile.name.split(".tmp").join(".flv");
					var desFile:File = new File(File.desktopDirectory.nativePath +"\\" + newFileNameStr);
					curVidFile.copyTo(desFile);
					record_btn.label = "Record";
				}
			}
			
			private function recordVid():void {
				var rec:Rectangle = vnc.getScreenBounds();
				
				
				var m:Matrix = new Matrix();
			 	var sx:Number =  videoWidth / rec.width;
			  	var sy:Number = videoHeight / rec.height;
			 	m.scale(sx, sy);
				
				var snapshot:BitmapData = new BitmapData(videoWidth, videoHeight, true);
				snapshot.draw(vnc.getScreenImage(), m);
				myWriter.saveFrame( snapshot );
				
			}
			
			override public function resizeMe():void {
				//trace('resizeMe called');
				
				var p:Tile = parent as Tile;
				if(this.width != p.tileWidth && this.height != p.tileHeight) {
					trace('image doesnt match - reconnect');
					reconnect();
				}
				
				if(!resized) {
					
					resized = true;
					
					this.height = p.tileHeight;
					this.width = p.tileWidth;					
					
					trace('setting new sizes');
					trace(this.height);
					trace(this.width);
					
					
					
					if(this.width > p.tileWidth && this.height > p.tileHeight) {
						trace('image doesnt match - reconnect');
					}else if(this.width > Math.round((this.height*currentImageWidth)/currentImageHeight)) {
						this.width = Math.round((this.height*currentImageWidth)/currentImageHeight);
						trace('setting width to ' + this.width);
						
					} else if(this.height > Math.round((this.width*currentImageHeight)/currentImageWidth)) {
						this.height = Math.round((this.width*currentImageHeight)/currentImageWidth);
						trace('setting height to ' + this.height);
					}
				}
			}
		]]>
	</mx:Script>
	
	<mx:Fade id="fadeOut" duration="800" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="800" alphaFrom="0.0" alphaTo="1.0"/>
	
	<mx:Canvas id="content" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#0080D9">
		
		<ns1:FVNC 
				id="vnc" left="0" right="0" fitToScreen="true" viewOnly="true" height="100%"
				top="0" width="100%" toolTip="Click me to enable a remote session" click="startLiveSession()" 
				borderColor="#FF0000" borderThickness="1">
		</ns1:FVNC>
		<mx:Canvas id="titlepanel" width="100%" x="0" y="0" height="40" backgroundColor="#000000" borderColor="#9A9A9A" borderStyle="solid" backgroundAlpha="0.6" visible="false" hideEffect="{fadeOut}" showEffect="{fadeIn}">
			<mx:Label x="10" y="7" text="" color="#EAEAEA" fontSize="16" fontWeight="bold" fontFamily="Arial" id="titleCaption"/>			
		</mx:Canvas>
		<mx:Canvas id="actionpanel" x="0" width="100%" height="57" bottom="0" backgroundColor="#000000" visible="false" hideEffect="{fadeOut}" showEffect="{fadeIn}" borderStyle="solid" borderColor="#9A9A9A" backgroundAlpha="0.6">
			<mx:Button x="10" y="19" label="Disconnect" id="btnConnect" enabled="false" click="switchVNCStatus()"/>
			<mx:Label x="106.5" y="1" id="lblVNCStatus" visible="true" text="disconnected"/>
			<mx:Button x="214" y="19" label="Record" id="record_btn" click="recordVideo()"/>
		</mx:Canvas>
	</mx:Canvas>
</comp:VNCPanel>
