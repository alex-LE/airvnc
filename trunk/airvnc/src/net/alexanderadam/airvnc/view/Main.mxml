<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:ac="com.adobe.ac.*" xmlns:view="net.alexanderadam.airvnc.view.*" xmlns:comp="net.alexanderadam.airvnc.view.components.*">
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
		
			import net.alexanderadam.airvnc.model.ViewModelLocator;
			import net.alexanderadam.airvnc.helper.Encryption;
			import mx.controls.Alert;
			import net.alexanderadam.airvnc.events.ResizeWindowEvent;
			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;
		
			[Bindable]
			public var modelLocator:ViewModelLocator = ViewModelLocator.getInstance();
			
			private var dialog:AddHost = new AddHost();
			private var configure_dialog:ConfigWindow = new ConfigWindow();
			
			private var loadfile:File = new File();
			
			private var reloadall_timer:Timer = new Timer(modelLocator.reloadall_time);
			
			public function startMove():void {
            	stage.nativeWindow.startMove();
            }
            
            private function toogleMinimizeMaximize():void {
            	if(modelLocator.isMaximized) {
            		trace('restore app');
            		Application.application.restore();
            		modelLocator.isMaximized = false;
					refreshAllSessions();
            	} else {
            		trace('maximize app');
            		Application.application.maximize();
            		modelLocator.isMaximized = true;
					refreshAllSessions();
            	}
            }
            
            private function showAddHost():void {
            	dialog.addEventListener(CloseEvent.CLOSE, function():void {
            		PopUpManager.removePopUp(dialog);

            	});
            	PopUpManager.addPopUp(dialog, this, true);
                PopUpManager.centerPopUp(dialog);
            }
            
            private function refreshAllSessions():void {
            	/*
            	for each(var item:VNCPanel in itemlist.getChildren()) {
            		item.reconnect();
            	}
            	*/
            	itemlist.removeAllChildren();
            	var tmp:XML = modelLocator.itemlist.copy();
            	modelLocator.itemlist = new XML();
            	modelLocator.itemlist = tmp;
				modelLocator.itemsadded = true;
            }
            
            private function saveXML():void {
            	var output:XML = modelLocator.itemlist;
            	
            	for each (var item:XML in output.Connection) {
            		delete item.@id;
            	}
            	
            	var file:File = File.applicationStorageDirectory.resolvePath('servers.xml');
            	var stream:FileStream = new FileStream();
            	stream.open(file, FileMode.WRITE);            	
            	stream.writeUTFBytes("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + output.toXMLString());
            	stream.close();
            	
            	Alert.show('XML saved!');
            }
            
            private function showLoadDialog():void {
				try  {
			        // Öffnen-Dialog von Flash aufrufen
			        loadfile.browseForOpen("Bitte wählen Sie eine Datei", [new FileFilter("Text", "*.txt;*.xml")]);

			        // event listener hinzufügen
			        //(funktion wird aufgerufen, wenn datei ausgewählt wurde)
			        loadfile.addEventListener(Event.SELECT, loadFile);
			    }
			   
			    catch (error:Error) {
			        trace(error.message);
			    }
            }
            
            private function loadFile(e:Event):void {
				// file in Variable abspeichern
				var f:File = e.target as File;
				
				var stream:FileStream = new FileStream;
				stream.open(f, FileMode.READ);
				var xmldata:XML = XML(stream.readUTFBytes(stream.bytesAvailable));
				
				for each (var item:XML in xmldata.Connection) {
					modelLocator.itemlist.appendChild(item);
				}
				modelLocator.itemlist = modelLocator.itemlist.copy();
            }
          
            private function showConfigureSettings():void {
            	configure_dialog.addEventListener(CloseEvent.CLOSE, function():void {
            		PopUpManager.removePopUp(configure_dialog);
            	});
            	
            	PopUpManager.addPopUp(configure_dialog, this, true);
                PopUpManager.centerPopUp(configure_dialog);
            }
            
            private function startReloadTimer():void {
            	reloadall_timer.start();
            }
            
            private function stopReloadTimer():void {
            	reloadall_timer.stop();
            }
		]]>
	</mx:Script>
	
	<ac:ObserveValue source="{modelLocator.reloadall}" handler="{startReloadTimer}" value="{true}"/>
	<ac:ObserveValue source="{modelLocator.reloadall}" handler="{stopReloadTimer}" value="{false}"/>

	<mx:Canvas width="100%" height="50" id="bar" styleName="bar" doubleClick="Application.application.maximize()" mouseDown="startMove()">
		<mx:LinkButton label="" click="{Application.application.close()}" right="10" top="10" width="23" height="17" labelPlacement="left" toolTip="close" icon="@Embed(source='assets/close.png')" styleName="appTool"/>
		<mx:LinkButton label="" click="{toogleMinimizeMaximize();}" id="btnMaximize" right="38" top="10" width="23" height="17" labelPlacement="left" toolTip="maximize" icon="@Embed(source='assets/max.png')" styleName="appTool"/>
		<mx:LinkButton label="" click="{Application.application.minimize();}" id="btnMinimize" right="66" top="10" width="23" height="17" labelPlacement="left" toolTip="minimize" icon="@Embed(source='assets/min.png')" alpha="1.0" styleName="appTool"/>
		<comp:MultiLineButton icon="@Embed(source='assets/document-open.png')" label="" width="80" top="5" bottom="5" left="5" styleName="appTool" alpha="1.0"  textAlign="left" click="showLoadDialog()"/>
		<comp:MultiLineButton icon="@Embed(source='assets/document-save-as.png')" label="" width="80" top="5" bottom="5" left="93" styleName="appTool" alpha="1.0" textAlign="left" click="saveXML()"/>
		<comp:MultiLineButton icon="@Embed(source='assets/window-new.png')" label="" width="80" top="5" bottom="5" left="181" styleName="appTool" alpha="1.0" textAlign="left" click="showAddHost()"/>
		<comp:MultiLineButton icon="@Embed(source='assets/view-refresh.png')" label="" width="80" top="5" bottom="5" left="269" styleName="appTool" alpha="1.0" textAlign="left" click="refreshAllSessions()"/>
		<comp:MultiLineButton icon="@Embed(source='assets/preferences-system.png')" label="" width="80" top="5" bottom="5" left="357" styleName="appTool" alpha="1.0" textAlign="left" click="showConfigureSettings()"/>
		<!--<comp:MultiLineButton icon="@Embed(source='assets/video-display.png')" label="" width="80" top="5" bottom="5" left="445" styleName="appTool" alpha="1.0" textAlign="left" click="{stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE}"/>-->
		<mx:Image y="8" source="net/alexanderadam/airvnc/view/assets/logo.png" height="32" right="120"/>
	</mx:Canvas>
	
	<comp:VNCTile
		id="itemlist" paddingBottom="3" paddingLeft="3" direction="horizontal"
		paddingRight="3" paddingTop="3" left="0" right="0" top="52" bottom="0" borderStyle="none" backgroundColor="#676767"
		horizontalAlign="center" verticalAlign="middle" verticalGap="5" horizontalGap="5" dataProvider="{modelLocator.itemlist}">
	</comp:VNCTile>
	
</mx:Canvas>
