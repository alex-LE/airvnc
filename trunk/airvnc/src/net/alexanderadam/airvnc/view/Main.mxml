<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:ac="com.adobe.ac.*" xmlns:view="net.alexanderadam.airvnc.view.*">
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
		
			import net.alexanderadam.airvnc.model.ViewModelLocator;
			import net.alexanderadam.airvnc.helper.Encryption;
			import mx.controls.Alert;
			import net.alexanderadam.airvnc.events.ResizeWindowEvent;
		
			[Bindable]
			public var modelLocator:ViewModelLocator = ViewModelLocator.getInstance();
			
			private function updateList(value:XML):void {
				trace('updateList called');
				if(modelLocator.itemsadded) {
					for each (var item:Object in value.Connection) {
						var vnc:VNCPanel;
						if(item.@type.toString() == 'thumb') {
							vnc = new VNCThumbnailPanel();
						} else if(item.@type.toString() == 'live') {
							vnc = new VNCLivePanel();
						} else {
							Alert.show('Invalid Type!');
							continue;
						}
						item
						
						vnc.password = Encryption.decrypt(item.@Password.toString(), modelLocator.key);
						vnc.host = item.@Host.toString();
						vnc.initialize();
						//vnc.addEventListener('VNCConnected', showImage);
						itemlist.addChild(vnc);
					}
					
					modelLocator.resized = true;
				}
			}
			
			private function resizeItems():void {
				//trace('resizeItems called');
				if(modelLocator.itemsadded) {
					//trace('resizing items');
					
					
					var x:int = itemlist.getChildren().length;
					
					var potenz:int = 1;
					
					while ((potenz*potenz) < x) {
					    potenz++;
					}
					
					//trace('potenz: '+potenz);
					//trace('total width: ' + Application.application.width);
					//trace('total height: ' + Application.application.height);
					
					var newwidth:int = Math.round((Application.application.width-(potenz*11))/potenz);
					//trace('item width: ' + newwidth);
					
					var newheight:int = Math.round((((Application.application.height-bar.height)-(potenz*12))/potenz))
					//trace('item height: ' + newheight);
					
					itemlist.tileWidth = newwidth;
					//itemlist.tileHeight = Math.round(newwidth/(4/3));
					
					itemlist.tileHeight = newheight;
					//itemlist.tileWidth = Math.round((newheight*4)/3);
					
					//trace('height: ' + itemlist.tileHeight);
					//trace('width: ' + itemlist.tileWidth);
					
					itemlist.direction = 'horizontal';
					
					modelLocator.resized = false;
				}
				var y:Object = itemlist.getChildren();
				trace(y.toString());
				for each(var item:VNCPanel in itemlist.getChildren()) {
					item.resizeMe();
					//trace(item);
				}
			}
			
			public function startMove():void {
            	stage.nativeWindow.startMove();
            }
            
            private function toogleMinimizeMaximize():void {
            	if(modelLocator.isMaximized) {
            		trace('restore app');
            		Application.application.restore();
            		modelLocator.isMaximized = false;
					//resizeItems();
            	} else {
            		trace('maximize app');
            		Application.application.maximize();
            		modelLocator.isMaximized = true;
					//resizeItems();
            	}
            }
		]]>
	</mx:Script>
	
	<ac:Observe source="{modelLocator.itemlist}" handler="{updateList}" />
	<ac:ObserveValue source="{modelLocator.resized}" handler="{resizeItems}" value="{true}"/>

	<mx:Canvas width="100%" height="50" id="bar" styleName="bar" doubleClick="Application.application.maximize()" mouseDown="startMove()">
		<mx:Button label="" click="{Application.application.close()}" right="10" top="10" width="20" height="19" labelPlacement="left" toolTip="close" icon="@Embed(source='../../../../assets/close.png')"/>
		<mx:Button label="" click="{toogleMinimizeMaximize();}" id="btnMaximize" right="38" top="10" width="20" height="19" labelPlacement="left" toolTip="maximize" icon="@Embed(source='../../../../assets/max.png')"/>
		<mx:Button label="" click="{Application.application.minimize();}" id="btnMinimize" right="66" top="10" width="20" height="19" labelPlacement="left" toolTip="minimize" icon="@Embed(source='../../../../assets/min.png')"/>
	</mx:Canvas>
	
	<mx:Tile 
		id="itemlist" paddingBottom="5" paddingLeft="5" direction="horizontal"
		paddingRight="5" paddingTop="5" left="0" right="0" top="52" bottom="0" borderStyle="solid" borderColor="#000000" backgroundColor="#676767"
		horizontalAlign="center" verticalAlign="middle">
	</mx:Tile>
</mx:Canvas>
